#!/usr/bin/env python

from __future__ import print_function
import os, sys, argparse
import froggit

class CommandLineInterface(object):

	def __init__(self):
		self.parser = argparse.ArgumentParser()
		self.commands = {}

	def __call__(self, argv):
		try:
			command = self.commands[argv[1]]
			return command(argv)
		except (IndexError, KeyError):
			return (
				"usage: {0} <command> [<args>]\n"
				"for help regarding a specific command, use {0} <command> --help\n"
				"commands: "
			).format(os.path.basename(argv[0])) + ", ".join(sorted(self.commands.keys()))


	def register_command(self, name, argdata):

		def decorator(method):

			def wrapper(argv):

				self.parser = argparse.ArgumentParser(prog = os.path.basename(argv[0]) + " " + name)
				for argument in argdata:
					self.parser.add_argument(*argument[0], **argument[1])

				args = self.parser.parse_args(argv[2:])

				return method(**args.__dict__)

			self.commands[name] = wrapper

			return wrapper

		return decorator

cli = CommandLineInterface()

@cli.register_command("build", [
	(("-o", "--out"), {
		"type": str,
		"default": ".",
		"help": "output directory name"
	})
])
def build(**args):
	site = froggit.Site()
	site.build(out=args["out"])

@cli.register_command("init", [])
def init(**args):
	froggit.new_environment()

def main():

	r = cli(sys.argv)
	if r:
		sys.exit(r)

if __name__ == "__main__":
	main()
