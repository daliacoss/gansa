#!/usr/bin/env python

# This file is part of Gansa.

# Gansa is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Gansa is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Gansa.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function
import os, sys, argparse, traceback
import gansa

class CommandLineInterface(object):

	def __init__(self):
		self.parser = argparse.ArgumentParser()
		self.commands = {}

	def __call__(self, argv):
		try:
			if len(argv) <= 1 or argv[1] == "--help":
				return self.help(argv)
			else:
				command = self.commands[argv[1]]
		except (KeyError):
			return self.help(argv, error=True)
		else:
			return command(argv)

	def help(self, argv, error=False):
		s = (
			"usage: {0} <command> [<args>]\n"
			"for help regarding a specific command, use {0} <command> --help\n"
			"commands: "
		).format(os.path.basename(argv[0])) + ", ".join(sorted(self.commands.keys()))

		if error:
			s += "\n\nerror: unrecognized command"

		return s

	def register_command(self, name, argdata):

		def decorator(method):

			def wrapper(argv):

				self.parser = argparse.ArgumentParser(prog = os.path.basename(argv[0]) + " " + name)
				for argument in argdata:
					self.parser.add_argument(*argument[0], **argument[1])

				args = self.parser.parse_args(argv[2:])
				self.args = args.__dict__

				return method(**args.__dict__)

			self.commands[name] = wrapper

			return wrapper

		return decorator

cli = CommandLineInterface()

@cli.register_command("build", [
	(("-o", "--out"), {
		"type": str,
		"default": "distribute",
		"help": "output directory name"
	}),
	(("-v", "--verbose"), {
		"action": "store_true",
		"default": False,
		"help": "print verbose error messages"
	})
])
def build(**args):
	site = gansa.Site(environment=".")
	site.build(out=args["out"])

@cli.register_command("init", [
	(("-v", "--verbose"), {
		"action": "store_true",
		"default": False,
		"help": "print verbose error messages"
	})
])
def init(**args):
	site = gansa.Site(environment=".", load=False)
	site.init_environment()

@cli.register_command("serve", [
	(("-H", "--host"), {
		"type": str,
		"default": "127.0.0.1",
		"help": "host name"
	}),
	(("-p", "--port"), {
		"type": int,
		"default": 5000,
		"help": "server port"
	}),
	(("-v", "--verbose"), {
		"action": "store_true",
		"default": False,
		"help": "print verbose error messages"
	})
])
def serve(**args):
	site = gansa.Site(environment=".", load=True)
	site.serve(args["host"], args["port"])

# @cli.register_command("", [])

def main():

	try:
		r = cli(sys.argv)
		if r:
			sys.exit(r)

	except Exception as e:

		if cli.args["verbose"]:
			sys.exit(traceback.format_exc())
		else:
			message = "{0}: {1}".format(type(e).__name__, sys.exc_info()[1])
			sys.exit(message)

if __name__ == "__main__":
	main()
